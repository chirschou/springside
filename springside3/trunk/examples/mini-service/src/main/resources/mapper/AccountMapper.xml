<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Account">
	<resultMap id="departmentDetailMap" type="Department">
		<id property="id" column="department_id" />
		<result property="name" column="department_name" />
		<association property="manager" column="manager_id" resultMap="departmentDetailMap.managerMap" />
		<collection property="userList" resultMap="departmentDetailMap.userMap" />
	</resultMap>

	<resultMap id="departmentDetailMap.managerMap" type="User">
		<id property="id" column="manager_id" />
		<result property="name" column="manager_name" />
		<result property="email" column="manager_email" />
	</resultMap>

	<resultMap id="departmentDetailMap.userMap" type="User">
		<id property="id" column="user_id" />
		<result property="name" column="user_name" />
		<result property="email" column="user_email" />
	</resultMap>

	<sql id="selectUserClause">
		select id, name, login_name as loginName, email 
		from acct_user
	</sql>

    <!-- 获取部门详细信息, 输出用resultMap关联嵌套对象 -->
	<select id="getDepartmentDetail" parameterType="int" resultMap="departmentDetailMap">
		select d.id as department_id,
		d.name as department_name,
		m.id as
		manager_id,
		m.name as manager_name,
		m.email as manager_email,
		u.id as user_id,
		u.name as user_name,
		u.email as user_email
		from acct_department d, acct_user m, acct_user u
		where d.manager_id=m.id and d.id=u.department_id
		and d.id=#{id}
	</select>
	
	<!-- 获取用户:
	     1.重用SQL语句的相同部分
	     2.login_name列要"as loginName"方便对象映射
	     3.输出直接映射对象-->
	<select id="getUser" parameterType="int" resultType="User">
		<include refid="selectUserClause"/>
		where id=#{id}
	</select>
	
	<!-- 分页查询共享的sql段 
	 mybatis现在使用Ognl表达式,ognl访问静态方法的表达式 为@class@method(args),
	  以下为调用springside中的Mybatis.isNotEmpty()方法,可以判断String,Collection,Map,Array是否为空 
	-->
	<sql id="User.where">
		<where>
			<if test="@Mybatis@isNotEmpty(loginName)">
				login_name=#{loginName}
			</if>
			<if test="name != null">
				and name=#{name}
			</if>
		</where>	
	</sql>
	
	<!-- 查询用户,演示:
	    1.重用SQL语句的相同部分
	    2.输入用map传入多个参数
	    3.<where>语句, 智能整理where和or关键字
	    4.输出直接映射对象 -->
	<select id="searchUser" parameterType="map" resultType="User">
		<include refid="selectUserClause"/>
		<include refid="User.where"/>
		limit #{limit} offset #{offset}
	</select>
	
	<!-- 分页查询count语句 -->
	<select id="searchUser.count" resultType="long">
		select count(*) from acct_user
		<include refid="User.where"/>
	</select>
	
	<!-- 插入用户：
	     1.由数据库生成id并赋值到user对象
	     2.输入用对象, 嵌套属性表达式#{department.id} -->
	<insert id="saveUser" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into acct_user (
		login_name, name, password, email, department_id)
		values (#{loginName}, #{name}, #{password}, #{email}, #{department.id})
	</insert>
</mapper> 
