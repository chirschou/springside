<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-lazy-init="true">

	<description>Shiro Configuration</description>


	<bean id="miniWebRealm"
		class="org.springside.examples.miniweb.service.account.MiniWebRealm" />

	<!--
		Shiro's main business-tier object for web-enabled applications (use
		org.apache.shiro.web.mgt.DefaultWebSecurityManager instead when there
		is no web environment)
	-->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--
			Single realm app (realm configured next, below). If you have multiple
			realms, use the 'realms' property instead.
		-->
		<property name="realm" ref="miniWebRealm" />
		<!--
			Uncomment this next property if you want heterogenous session access
			or clusterable/distributable sessions. The default value is 'http'
			which uses the Servlet container's HttpSession as the underlying
			Session implementation. <property name="sessionMode" value="native"/>
		-->
	</bean>

	<!--
		Post processor that automatically invokes init() and destroy() methods
	-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!--
		Define the Shiro Filter here (as a FactoryBean) instead of directly in
		web.xml - web.xml uses the DelegatingFilterProxy to access this bean.
		This allows us to wire things with more control as well utilize nice
		Spring things such as PropertiesPlaceholderConfigurer and abstract
		beans or anything else we might need:
	-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.action" />
		<property name="successUrl" value="/account/user.action" />
		<property name="unauthorizedUrl" value="/" />
		<!-- 若不设置filters,默认采用FormAuthenticationFilter -->
		<property name="filters">
            <util:map>
                <entry key="authc">
                    <bean class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter"/>
                </entry>
            </util:map>
        </property>
		<property name="filterChainDefinitions">
			<value>
				/account/user!save* = perms[user:manage]
				/account/user!input* = perms[user:view]
				/account/user!delete* = perms[user:manage]
				/account/role!save* = perms[role:manage]
				/account/role!input* = perms[role:view]
				/account/role!delete* = perms[role:manage]
				/account/** = authc
            </value>
		</property>
	</bean>
</beans>